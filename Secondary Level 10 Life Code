from tkinter import *
from PIL import Image, ImageTk
import pathlib, os
import math
import tkinter.font as font

class CircleFrame():
    def __init__(self, sliceImage, sliceRating):
        global nextFrame, deFont
        nextFrame = ""
        self.sliceImage = sliceImage
        self.sliceRating = sliceRating
        deFont = font.Font(family="Palatino_Linotype", size=8)

    @property
    def sliceName(self):
        return self._sliceName

    @sliceName.setter
    def sliceName(self, value):
        self._sliceName = value

    @property
    def sliceImage(self):
        return self._sliceImage

    @sliceImage.setter
    def sliceImage(self, value):
        self._sliceImage = value

    @property
    def sliceRating(self):
        return self._sliceRating

    @sliceRating.setter
    def sliceRating(self, value):
        self._sliceRating = value

class MainCircle():
    def __init__(self, the_window):
        global frameM
        frameM = Frame(width=600, height=410, bg="white")
        self.spriteLibrary = []
        self.current_dir = pathlib.Path(__file__).parent.resolve()

    # modify the new circle by basically redoing the entire setup, but with the new sliceRating
    def returning(self):
        frame2.pack_forget()
        MainCircle.canvasM.destroy()
        SideCircleR.canvas1.destroy()
        self.createSlicesM()
        self.createCircle(len(self.spriteLibrary))
        frameM.pack(side="left")

    # create the main pie slice objects
    def createSlicesM(self):
        global s1, s2, s3, s4, s5, s6, s7, s8, s9, s10
        s1 = CircleFrame("10_Pie_Slice_r", str(int(averages["1"])))
        s2 = CircleFrame("10_Pie_Slice_m", str(int(averages["2"])))
        s3 = CircleFrame("10_Pie_Slice_fit", str(int(averages["3"])))
        s4 = CircleFrame("10_Pie_Slice_c", str(int(averages["4"])))
        s5 = CircleFrame("10_Pie_Slice_free", str(int(averages["5"])))
        s6 = CircleFrame("10_Pie_Slice_k", str(int(averages["6"])))
        s7 = CircleFrame("10_Pie_Slice_fri", str(int(averages["7"])))
        s8 = CircleFrame("10_Pie_Slice_sc", str(int(averages["8"])))
        s9 = CircleFrame("10_Pie_Slice_fa", str(int(averages["9"])))
        s10 = CircleFrame("10_Pie_Slice_fi", str(int(averages["10"])))

    # create a list for easy recall
    def createCircle(self, val):
        global sliceList
        sliceList = [s3, s4, s5, s6, s7, s8, s9, s10, s1, s2]

        # generate the canvas
        MainCircle.canvasM = Canvas(frameM, width=600, height=410, bg="white")
        MainCircle.canvasM.pack()

        # create the buttons
        category1 = Button(MainCircle.canvasM, font=deFont, text="Romance", fg="#cb0000", bg="Grey", relief="groove", command= lambda: self.generateSide(5, "r"))
        category1.pack(padx=0, pady=0)
        MainCircle.canvasM.create_window(200, 30, window=category1, anchor="nw")

        category2 = Button(MainCircle.canvasM, font=deFont, text="Mindset", fg="#fde838", bg="Grey", relief="groove", command= lambda: self.generateSide(6, "m"))
        category2.pack(padx=0, pady=0)
        MainCircle.canvasM.create_window(300, 30, window=category2, anchor="nw")

        category3 = Button(MainCircle.canvasM, font=deFont, text="Fitness", fg="#5bf765", bg="Grey", relief="groove", command= lambda: self.generateSide(5, "fit"))
        category3.pack(padx=0, pady=0)
        MainCircle.canvasM.create_window(400, 80, window=category3, anchor="nw")

        category4 = Button(MainCircle.canvasM, font=deFont, text="Career", fg="#45baff", bg="Grey", relief="groove", command= lambda: self.generateSide(6, "c"))
        category4.pack(padx=0, pady=0)
        MainCircle.canvasM.create_window(415, 160, window=category4, anchor="nw")

        category5 = Button(MainCircle.canvasM, font=deFont, text="Free Time", fg="#1221ff", bg="Grey", relief="groove", command= lambda: self.generateSide(5, "free"))
        category5.pack(padx=0, pady=0)
        MainCircle.canvasM.create_window(410, 250, window=category5, anchor="nw")

        category6 = Button(MainCircle.canvasM, font=deFont, text="Karma", fg="#7b16ff", bg="Grey", relief="groove", command= lambda: self.generateSide(6, "k"))
        category6.pack(padx=0, pady=0)
        MainCircle.canvasM.create_window(320, 320, window=category6, anchor="nw")

        category7 = Button(MainCircle.canvasM, font=deFont, text="Friendship", fg="#f730ed", bg="Grey", relief="groove", command= lambda: self.generateSide(7, "fri"))
        category7.pack(padx=0, pady=0)
        MainCircle.canvasM.create_window(210, 320, window=category7, anchor="nw")

        category8 = Button(MainCircle.canvasM, font=deFont, text="Self Care", fg="#ff1755", bg="Grey", relief="groove", command= lambda: self.generateSide(7, "sc"))
        category8.pack(padx=0, pady=0)
        MainCircle.canvasM.create_window(115, 260, window=category8, anchor="nw")

        category9 = Button(MainCircle.canvasM, font=deFont, text="Family", fg="#ff6287", bg="Grey", relief="groove", command= lambda: self.generateSide(5, "fa"))
        category9.pack(padx=0, pady=0)
        MainCircle.canvasM.create_window(90, 180, window=category9, anchor="nw")

        category10 = Button(MainCircle.canvasM, font=deFont, text="Finance", fg="#acacb7", bg="Grey", relief="groove", command= lambda: self.generateSide(5, "fi"))
        category10.pack(padx=0, pady=0)
        MainCircle.canvasM.create_window(110, 90, window=category10, anchor="nw")

        # generate the images
        
        for i in range(len(sliceList)):
            directory = sliceList[i].sliceImage + sliceList[i].sliceRating + ".png"
            img_path = os.path.join(self.current_dir, directory)
            sprite = ImageTk.PhotoImage(file=img_path)
            sprite = sprite._PhotoImage__photo.subsample(4)
            # save the images to a list so that they can all display at the same time
            self.spriteLibrary.append(sprite)
            MainCircle.canvasM.image = sprite
            # place the images down, set up to be arranged in a circle, utilizing the rotation forumla. (The images are STILL WIP so they might not fit entirely)
            MainCircle.canvasM.create_image(((60 * math.cos(math.radians(36*i))) + (60 * math.sin(math.radians(36*i)))) + 220,\
            ((60 * math.sin(math.radians(36*i))) - (60 * math.cos(math.radians(-36*i)))) + 130,image=self.spriteLibrary[i + val], anchor="nw")
            frameM.pack(side="left")

    # generate the circle
    def generateMain(self):
        self.createSlicesM()
        self.createCircle(0)

    # swap to the second circle
    def generateSide(self, size, category):
        frameM.pack_forget()
        SideCircleR.createSlices1(self, size, category)



class SideCircleR():
    def __init__(self, the_window):
        global frame2, categories, averages
        frame2 = Frame(width=600, height=410)
        # this is the lineup for all the ratings in each subcategory
        categories = {}
        self.spritelibrary2 = []
        averages = {str(x+1): 0 for x in range(10)}
        self.current_dir = pathlib.Path(__file__).parent.resolve()
        self.coordinates5X = {}
        self.coordinates5Y = [0, 57, 151, 276, 438, 632, 869, 1144, 1456, 1806, 2200]
        self.coordinates6X = {}
        self.coordinates6Y = []
        self.coordinates7X = {}
        self.coordinates7Y = [0, 78, 171, 285, 446, 637, 859, 1117, 1422, 1791, 2244]

    # set each rating to its corresponding category
    def rateList(self, size, prevRatings, buttonNum, sliceGroup, category):
        rat = 0
        for i in range(((int(sliceGroup) * 10) - 9), ((int(sliceGroup) * 10) + 1)):
            rat += categories[("category" + category)][str(i)]
        if (buttonNum > rat):
            for i in range(((int(sliceGroup) * 10) - 9), ((int(sliceGroup) * 10) - (9 - (buttonNum)))):
                categories[("category" + category)][str(i)] = 1
        elif (buttonNum < rat):
            for i in range((buttonNum + ((int(sliceGroup) - 1) * 10)) + 1, (int(sliceGroup) * 10) + 1):
                categories[("category" + category)][str(1)] = 1
                categories[("category" + category)][str(i)] = 0
        elif (buttonNum == (rat)):
            for i in range(((int(sliceGroup) * 10) - 9), ((int(sliceGroup) * 10))):
                categories[("category" + category)][str(i)] = 0
        SideCircleR.canvas1.destroy()
        SideCircleR.createSlices1(self, size, category)

    def Spritecoordinates(self):
        self.coordinates5X["1"] = [0, 45, 97, 149, 201, 253]
        self.coordinates5X["2"] = [0, 68, 158, 234, 317, 400]
        self.coordinates5X["3"] = [0, 92, 207, 322, 437, 552]
        self.coordinates5X["4"] = [0, 120, 272, 424, 576, 728]
        self.coordinates5X["5"] = [0, 144, 328, 512, 696, 880]
        self.coordinates5X["6"] = [0, 176, 403, 630, 857, 1084]
        self.coordinates5X["7"] = [0, 205, 470, 735, 1000, 1265]
        self.coordinates5X["8"] = [0, 233, 535, 837, 1139, 1441]
        self.coordinates5X["9"] = [0, 260, 598, 936, 1274, 1612]
        self.coordinates5X["10"] = [0, 294, 678, 1062, 1446, 1830]

        self.coordinates7X["1"] = [0, 54, 132, 198, 272, 346, 412, 490]
        self.coordinates7X["2"] = [0, 65, 158, 237, 326, 415, 494, 587]
        self.coordinates7X["3"] = [0, 80, 194, 290, 398, 506, 604, 718]
        self.coordinates7X["4"] = [0, 113, 274, 411, 564, 717, 854, 1015]
        self.coordinates7X["5"] = [0, 135, 326, 489, 672, 853, 1016, 1207]
        self.coordinates7X["6"] = [0, 156, 378, 566, 776, 986, 1176, 1396]
        self.coordinates7X["7"] = [0, 182, 340, 558, 804, 1048, 1268, 1526]
        self.coordinates7X["8"] = [0, 215, 520, 777, 1066, 1353, 1612, 1915]
        self.coordinates7X["9"] = [0, 261, 630, 941, 1292, 1641, 1956, 2325]
        self.coordinates7X["10"] = [0, 321, 774, 1157, 1588, 2017, 2404, 2857]

    def ratingListSetup(self):
        categories["categoryr"] = {str(x+1): 0 for x in range((50))}
        categories["categoryfree"] = {str(x+1): 0 for x in range((50))}
        categories["categoryfa"] = {str(x+1): 0 for x in range((50))}
        categories["categoryfi"] = {str(x+1): 0 for x in range((50))}
        categories["categoryfit"] = {str(x+1): 0 for x in range((50))}
        categories["categoryc"] = {str(x+1): 0 for x in range((60))}
        categories["categorym"] = {str(x+1): 0 for x in range((60))}
        categories["categoryk"] = {str(x+1): 0 for x in range((60))}
        categories["categorysc"] = {str(x+1): 0 for x in range((70))}
        categories["categoryfri"] = {str(x+1): 0 for x in range((70))}

    # calculate the rating average and go back to the main function
    def goBackToMain(self, prevRatings, frame):
        categoriez = ["r", "m", "fit", "c", "free", "k", "fri", "sc", "fa", "fi"]
        for j in range(1, 11):
            averages[str(j)] = 0
            for i in range(1, (len(categories[("category" + categoriez[j-1])]) + 1)):
                averages[str(j)] += categories[("category" + categoriez[j-1])][str(i)]
            averages[str(j)] /= (len(categories[("category" + categoriez[j-1])])/10)
        create.returning()

    def imagename(self, size, segment, PrevRat, currentRating, group, category):
        setting = ""
        summation = 0
        for i in range(((group * 10) - 9), ((group * 10) + 1)):
            if (categories[("category" + category)][str(i)] == 1):
                summation += 1
            else:
                summation += 0
        if (PrevRat == 1) and (currentRating == summation):
            setting = category
        elif (PrevRat == 0) and (summation > currentRating):
            setting = category
        elif (PrevRat == 1) and (summation < currentRating):
            setting = 0
        elif (PrevRat == 1) and (summation > currentRating):
            setting = category
        else:
            setting = 0

        if (size == 5):
            left = self.coordinates5X[str(segment)][group - 1]
            up = self.coordinates5Y[(segment - 1)]
            right = self.coordinates5X[str(segment)][group]
            down = self.coordinates5Y[segment]
        elif (size == 6):
            left = self.coordinates5X[str(segment)][group - 1]
            up = self.coordinates5Y[(segment - 1)]
            right = self.coordinates5X[str(segment)][group]
            down = self.coordinates5Y[segment]
        elif (size == 7):
            left = self.coordinates7X[str(segment)][group - 1]
            up = self.coordinates7Y[(segment - 1)]
            right = self.coordinates7X[str(segment)][group]
            down = self.coordinates7Y[segment]


        directory = "spritesheet{}_{}.png".format(size, setting)
        img_path = os.path.join(self.current_dir, directory)
        sheet = Image.open(img_path)
        slicePiece = sheet.crop([left, up, right, down])
        sprite = ImageTk.PhotoImage(slicePiece)
        sprite = sprite._PhotoImage__photo.subsample(7)
        self.spritelibrary2.append(sprite)
        SideCircleR.canvas1.image = sprite
        return self.spritelibrary2[len(self.spritelibrary2) - 1]


    # create the slices similar to the main circle
    def createSlices1(self, size, category):
        frame2.pack(side="left")


        SideCircleR.canvas1 = Canvas(frame2, width=600, height=410, bg="white")
        SideCircleR.canvas1.pack()


        # set up the buttons for the first rating                     size  segment              PrevRat            currentRating  group  category
        Button1_j = Button(SideCircleR.canvas1, image=create3.imagename(size, 10, categories[("category" + category)][str(10)], 10, 1, category), relief="flat", bg="White", border = "0", command= lambda: create3.rateList(size, categories[("category" + category)], 10, "1", category))
        Button1_j.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(280, 90, window=Button1_j, anchor="center")

        Button1_i = Button(SideCircleR.canvas1, image=create3.imagename(size, 9, categories[("category" + category)][str(9)], 9, 1, category), relief="flat", bg="White", border = "0", command= lambda: create3.rateList(size, categories[("category" + category)], 9, "1", category))
        Button1_i.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(260, 130, window=Button1_i, anchor="center")

        Button1_h = Button(SideCircleR.canvas1, image=create3.imagename(size, 8, categories[("category" + category)][str(8)], 8, 1, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 8, "1", category))
        Button1_h.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(240, 170, window=Button1_h, anchor="center")

        Button1_g = Button(SideCircleR.canvas1, image=create3.imagename(size, 7, categories[("category" + category)][str(7)], 7, 1, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 7, "1", category))
        Button1_g.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(220, 210, window=Button1_g, anchor="center")

        Button1_f = Button(SideCircleR.canvas1, image=create3.imagename(size, 6, categories[("category" + category)][str(6)], 6, 1, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 6, "1", category))
        Button1_f.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(200, 250, window=Button1_f, anchor="center")

        Button1_e = Button(SideCircleR.canvas1, image=create3.imagename(size, 5, categories[("category" + category)][str(5)], 5, 1, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 5, "1", category))
        Button1_e.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(180, 290, window=Button1_e, anchor="center")

        Button1_d = Button(SideCircleR.canvas1, image=create3.imagename(size, 4, categories[("category" + category)][str(4)], 4, 1, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 4, "1", category))
        Button1_d.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(160, 330, window=Button1_d, anchor="center")

        Button1_c = Button(SideCircleR.canvas1, image=create3.imagename(size, 3, categories[("category" + category)][str(3)], 3, 1, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 3, "1", category))
        Button1_c.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(140, 370, window=Button1_c, anchor="center")

        Button1_b = Button(SideCircleR.canvas1, image=create3.imagename(size, 2, categories[("category" + category)][str(2)], 2, 1, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 2, "1", category))
        Button1_b.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(120, 410, window=Button1_b, anchor="center")

        Button1_a = Button(SideCircleR.canvas1, image=create3.imagename(size, 1, categories[("category" + category)][str(1)], 1, 1, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 1, "1", category))
        Button1_a.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(100, 450, window=Button1_a, anchor="center")



        Button2_j = Button(SideCircleR.canvas1, image=create3.imagename(size, 10, categories[("category" + category)][str(20)], 10, 2, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 10, "2", category))
        Button2_j.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(480, 90, window=Button2_j, anchor="center")

        Button2_i = Button(SideCircleR.canvas1, image=create3.imagename(size, 9, categories[("category" + category)][str(19)], 9, 2, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 9, "2", category))
        Button2_i.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(460, 130, window=Button2_i, anchor="center")

        Button2_h = Button(SideCircleR.canvas1, image=create3.imagename(size, 8, categories[("category" + category)][str(18)], 8, 2, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 8, "2", category))
        Button2_h.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(440, 170, window=Button2_h, anchor="center")

        Button2_g = Button(SideCircleR.canvas1, image=create3.imagename(size, 7, categories[("category" + category)][str(17)], 7, 2, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 7, "2", category))
        Button2_g.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(420, 210, window=Button2_g, anchor="center")

        Button2_f = Button(SideCircleR.canvas1, image=create3.imagename(size, 6, categories[("category" + category)][str(16)], 6, 2, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 6, "2", category))
        Button2_f.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(400, 250, window=Button2_f, anchor="center")

        Button2_e = Button(SideCircleR.canvas1, image=create3.imagename(size, 5, categories[("category" + category)][str(15)], 5, 2, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 5, "2", category))
        Button2_e.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(380, 290, window=Button2_e, anchor="center")

        Button2_d = Button(SideCircleR.canvas1, image=create3.imagename(size, 4, categories[("category" + category)][str(14)], 4, 2, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 4, "2", category))
        Button2_d.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(360, 330, window=Button2_d, anchor="center")

        Button2_c = Button(SideCircleR.canvas1, image=create3.imagename(size, 3, categories[("category" + category)][str(13)], 3, 2, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 3, "2", category))
        Button2_c.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(340, 370, window=Button2_c, anchor="center")

        Button2_b = Button(SideCircleR.canvas1, image=create3.imagename(size, 2, categories[("category" + category)][str(12)], 2, 2, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 2, "2", category))
        Button2_b.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(320, 410, window=Button2_b, anchor="center")

        Button2_a = Button(SideCircleR.canvas1, image=create3.imagename(size, 1, categories[("category" + category)][str(11)], 1, 2, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 1, "2", category))
        Button2_a.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(300, 450, window=Button2_a, anchor="center")


        Button3_j = Button(SideCircleR.canvas1, image=create3.imagename(size, 10, categories[("category" + category)][str(30)], 10, 3, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 10, "3", category))
        Button3_j.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(780, 190, window=Button3_j, anchor="center")

        Button3_i = Button(SideCircleR.canvas1, image=create3.imagename(size, 9, categories[("category" + category)][str(29)], 9, 3, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 9, "3", category))
        Button3_i.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(760, 230, window=Button3_i, anchor="center")

        Button3_h = Button(SideCircleR.canvas1, image=create3.imagename(size, 8, categories[("category" + category)][str(28)], 8, 3, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 8, "3", category))
        Button3_h.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(740, 270, window=Button3_h, anchor="center")

        Button3_g = Button(SideCircleR.canvas1, image=create3.imagename(size, 7, categories[("category" + category)][str(27)], 7, 3, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 7, "3", category))
        Button3_g.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(720, 310, window=Button3_g, anchor="center")

        Button3_f = Button(SideCircleR.canvas1, image=create3.imagename(size, 6, categories[("category" + category)][str(26)], 6, 3, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 6, "3", category))
        Button3_f.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(700, 350, window=Button3_f, anchor="center")

        Button3_e = Button(SideCircleR.canvas1, image=create3.imagename(size, 5, categories[("category" + category)][str(25)], 5, 3, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 5, "3", category))
        Button3_e.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(680, 390, window=Button3_e, anchor="center")

        Button3_d = Button(SideCircleR.canvas1, image=create3.imagename(size, 4, categories[("category" + category)][str(24)], 4, 3, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 4, "3", category))
        Button3_d.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(660, 430, window=Button3_d, anchor="center")

        Button3_c = Button(SideCircleR.canvas1, image=create3.imagename(size, 3, categories[("category" + category)][str(23)], 3, 3, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 3, "3", category))
        Button3_c.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(640, 470, window=Button3_c, anchor="center")

        Button3_b = Button(SideCircleR.canvas1, image=create3.imagename(size, 2, categories[("category" + category)][str(22)], 2, 3, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 2, "3", category))
        Button3_b.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(620, 510, window=Button3_b, anchor="center")

        Button3_a = Button(SideCircleR.canvas1, image=create3.imagename(size, 1, categories[("category" + category)][str(21)], 1, 3, category), relief="flat", bg="White", command= lambda: create3.rateList(size, categories[("category" + category)], 1, "3", category))
        Button3_a.pack(padx=0, pady=0)
        SideCircleR.canvas1.create_window(600, 550, window=Button3_a, anchor="center")





        backButton = Button(SideCircleR.canvas1, font=deFont, text="Back", relief="raised", fg="Black", command= lambda: create3.goBackToMain(categories[("category" + category)], frame2))
        backButton.pack()
        SideCircleR.canvas1.create_window(20, 20, window=backButton, anchor="nw")


# create the text frame :]
class TextFrame():
    def __init__(self, the_window):
        frame2 = Frame(width=200, height=410, bg="grey")
        frame2.pack(side="right")
        canvas2 = Canvas(frame2, width=200, height=410, bg="grey")
        canvas2.pack()

###################################################################
# Main Program
###################################################################

# window is weird atm since the current image sizes have not been tweaked to fit yet
width = 800
height = 410

window = Tk()
window.geometry("{}x{}".format(width, height))
window.title("Level 10 Life")

create = MainCircle(window)
create2 = TextFrame(window)
create3 = SideCircleR(window)
create3.ratingListSetup()
create3.Spritecoordinates()
create.generateMain()

window.mainloop
